
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SchoolDetails` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model SchoolDetails
 * 
 */
export type SchoolDetailsModel = runtime.Types.Result.DefaultSelection<Prisma.$SchoolDetailsPayload>

export type AggregateSchoolDetails = {
  _count: SchoolDetailsCountAggregateOutputType | null
  _avg: SchoolDetailsAvgAggregateOutputType | null
  _sum: SchoolDetailsSumAggregateOutputType | null
  _min: SchoolDetailsMinAggregateOutputType | null
  _max: SchoolDetailsMaxAggregateOutputType | null
}

export type SchoolDetailsAvgAggregateOutputType = {
  totalBatches: number | null
  totalExams: number | null
  totalStudents: number | null
  totalTeachers: number | null
}

export type SchoolDetailsSumAggregateOutputType = {
  totalBatches: number | null
  totalExams: number | null
  totalStudents: number | null
  totalTeachers: number | null
}

export type SchoolDetailsMinAggregateOutputType = {
  schoolId: string | null
  totalBatches: number | null
  totalExams: number | null
  totalStudents: number | null
  totalTeachers: number | null
}

export type SchoolDetailsMaxAggregateOutputType = {
  schoolId: string | null
  totalBatches: number | null
  totalExams: number | null
  totalStudents: number | null
  totalTeachers: number | null
}

export type SchoolDetailsCountAggregateOutputType = {
  schoolId: number
  totalBatches: number
  totalExams: number
  totalStudents: number
  totalTeachers: number
  _all: number
}


export type SchoolDetailsAvgAggregateInputType = {
  totalBatches?: true
  totalExams?: true
  totalStudents?: true
  totalTeachers?: true
}

export type SchoolDetailsSumAggregateInputType = {
  totalBatches?: true
  totalExams?: true
  totalStudents?: true
  totalTeachers?: true
}

export type SchoolDetailsMinAggregateInputType = {
  schoolId?: true
  totalBatches?: true
  totalExams?: true
  totalStudents?: true
  totalTeachers?: true
}

export type SchoolDetailsMaxAggregateInputType = {
  schoolId?: true
  totalBatches?: true
  totalExams?: true
  totalStudents?: true
  totalTeachers?: true
}

export type SchoolDetailsCountAggregateInputType = {
  schoolId?: true
  totalBatches?: true
  totalExams?: true
  totalStudents?: true
  totalTeachers?: true
  _all?: true
}

export type SchoolDetailsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SchoolDetails to aggregate.
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SchoolDetails to fetch.
   */
  orderBy?: Prisma.SchoolDetailsOrderByWithRelationInput | Prisma.SchoolDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SchoolDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SchoolDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SchoolDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SchoolDetails
  **/
  _count?: true | SchoolDetailsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SchoolDetailsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SchoolDetailsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SchoolDetailsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SchoolDetailsMaxAggregateInputType
}

export type GetSchoolDetailsAggregateType<T extends SchoolDetailsAggregateArgs> = {
      [P in keyof T & keyof AggregateSchoolDetails]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchoolDetails[P]>
    : Prisma.GetScalarType<T[P], AggregateSchoolDetails[P]>
}




export type SchoolDetailsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SchoolDetailsWhereInput
  orderBy?: Prisma.SchoolDetailsOrderByWithAggregationInput | Prisma.SchoolDetailsOrderByWithAggregationInput[]
  by: Prisma.SchoolDetailsScalarFieldEnum[] | Prisma.SchoolDetailsScalarFieldEnum
  having?: Prisma.SchoolDetailsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SchoolDetailsCountAggregateInputType | true
  _avg?: SchoolDetailsAvgAggregateInputType
  _sum?: SchoolDetailsSumAggregateInputType
  _min?: SchoolDetailsMinAggregateInputType
  _max?: SchoolDetailsMaxAggregateInputType
}

export type SchoolDetailsGroupByOutputType = {
  schoolId: string
  totalBatches: number
  totalExams: number
  totalStudents: number
  totalTeachers: number
  _count: SchoolDetailsCountAggregateOutputType | null
  _avg: SchoolDetailsAvgAggregateOutputType | null
  _sum: SchoolDetailsSumAggregateOutputType | null
  _min: SchoolDetailsMinAggregateOutputType | null
  _max: SchoolDetailsMaxAggregateOutputType | null
}

type GetSchoolDetailsGroupByPayload<T extends SchoolDetailsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SchoolDetailsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SchoolDetailsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SchoolDetailsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SchoolDetailsGroupByOutputType[P]>
      }
    >
  >



export type SchoolDetailsWhereInput = {
  AND?: Prisma.SchoolDetailsWhereInput | Prisma.SchoolDetailsWhereInput[]
  OR?: Prisma.SchoolDetailsWhereInput[]
  NOT?: Prisma.SchoolDetailsWhereInput | Prisma.SchoolDetailsWhereInput[]
  schoolId?: Prisma.StringFilter<"SchoolDetails"> | string
  totalBatches?: Prisma.IntFilter<"SchoolDetails"> | number
  totalExams?: Prisma.IntFilter<"SchoolDetails"> | number
  totalStudents?: Prisma.IntFilter<"SchoolDetails"> | number
  totalTeachers?: Prisma.IntFilter<"SchoolDetails"> | number
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
}

export type SchoolDetailsOrderByWithRelationInput = {
  schoolId?: Prisma.SortOrder
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
  school?: Prisma.SchoolOrderByWithRelationInput
}

export type SchoolDetailsWhereUniqueInput = Prisma.AtLeast<{
  schoolId?: string
  AND?: Prisma.SchoolDetailsWhereInput | Prisma.SchoolDetailsWhereInput[]
  OR?: Prisma.SchoolDetailsWhereInput[]
  NOT?: Prisma.SchoolDetailsWhereInput | Prisma.SchoolDetailsWhereInput[]
  totalBatches?: Prisma.IntFilter<"SchoolDetails"> | number
  totalExams?: Prisma.IntFilter<"SchoolDetails"> | number
  totalStudents?: Prisma.IntFilter<"SchoolDetails"> | number
  totalTeachers?: Prisma.IntFilter<"SchoolDetails"> | number
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
}, "schoolId">

export type SchoolDetailsOrderByWithAggregationInput = {
  schoolId?: Prisma.SortOrder
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
  _count?: Prisma.SchoolDetailsCountOrderByAggregateInput
  _avg?: Prisma.SchoolDetailsAvgOrderByAggregateInput
  _max?: Prisma.SchoolDetailsMaxOrderByAggregateInput
  _min?: Prisma.SchoolDetailsMinOrderByAggregateInput
  _sum?: Prisma.SchoolDetailsSumOrderByAggregateInput
}

export type SchoolDetailsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SchoolDetailsScalarWhereWithAggregatesInput | Prisma.SchoolDetailsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SchoolDetailsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SchoolDetailsScalarWhereWithAggregatesInput | Prisma.SchoolDetailsScalarWhereWithAggregatesInput[]
  schoolId?: Prisma.StringWithAggregatesFilter<"SchoolDetails"> | string
  totalBatches?: Prisma.IntWithAggregatesFilter<"SchoolDetails"> | number
  totalExams?: Prisma.IntWithAggregatesFilter<"SchoolDetails"> | number
  totalStudents?: Prisma.IntWithAggregatesFilter<"SchoolDetails"> | number
  totalTeachers?: Prisma.IntWithAggregatesFilter<"SchoolDetails"> | number
}

export type SchoolDetailsCreateInput = {
  totalBatches?: number
  totalExams?: number
  totalStudents?: number
  totalTeachers?: number
  school: Prisma.SchoolCreateNestedOneWithoutSchoolDetailsInput
}

export type SchoolDetailsUncheckedCreateInput = {
  schoolId: string
  totalBatches?: number
  totalExams?: number
  totalStudents?: number
  totalTeachers?: number
}

export type SchoolDetailsUpdateInput = {
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
  school?: Prisma.SchoolUpdateOneRequiredWithoutSchoolDetailsNestedInput
}

export type SchoolDetailsUncheckedUpdateInput = {
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type SchoolDetailsCreateManyInput = {
  schoolId: string
  totalBatches?: number
  totalExams?: number
  totalStudents?: number
  totalTeachers?: number
}

export type SchoolDetailsUpdateManyMutationInput = {
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type SchoolDetailsUncheckedUpdateManyInput = {
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type SchoolDetailsNullableScalarRelationFilter = {
  is?: Prisma.SchoolDetailsWhereInput | null
  isNot?: Prisma.SchoolDetailsWhereInput | null
}

export type SchoolDetailsCountOrderByAggregateInput = {
  schoolId?: Prisma.SortOrder
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
}

export type SchoolDetailsAvgOrderByAggregateInput = {
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
}

export type SchoolDetailsMaxOrderByAggregateInput = {
  schoolId?: Prisma.SortOrder
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
}

export type SchoolDetailsMinOrderByAggregateInput = {
  schoolId?: Prisma.SortOrder
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
}

export type SchoolDetailsSumOrderByAggregateInput = {
  totalBatches?: Prisma.SortOrder
  totalExams?: Prisma.SortOrder
  totalStudents?: Prisma.SortOrder
  totalTeachers?: Prisma.SortOrder
}

export type SchoolDetailsCreateNestedOneWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
  connectOrCreate?: Prisma.SchoolDetailsCreateOrConnectWithoutSchoolInput
  connect?: Prisma.SchoolDetailsWhereUniqueInput
}

export type SchoolDetailsUncheckedCreateNestedOneWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
  connectOrCreate?: Prisma.SchoolDetailsCreateOrConnectWithoutSchoolInput
  connect?: Prisma.SchoolDetailsWhereUniqueInput
}

export type SchoolDetailsUpdateOneWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
  connectOrCreate?: Prisma.SchoolDetailsCreateOrConnectWithoutSchoolInput
  upsert?: Prisma.SchoolDetailsUpsertWithoutSchoolInput
  disconnect?: Prisma.SchoolDetailsWhereInput | boolean
  delete?: Prisma.SchoolDetailsWhereInput | boolean
  connect?: Prisma.SchoolDetailsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolDetailsUpdateToOneWithWhereWithoutSchoolInput, Prisma.SchoolDetailsUpdateWithoutSchoolInput>, Prisma.SchoolDetailsUncheckedUpdateWithoutSchoolInput>
}

export type SchoolDetailsUncheckedUpdateOneWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
  connectOrCreate?: Prisma.SchoolDetailsCreateOrConnectWithoutSchoolInput
  upsert?: Prisma.SchoolDetailsUpsertWithoutSchoolInput
  disconnect?: Prisma.SchoolDetailsWhereInput | boolean
  delete?: Prisma.SchoolDetailsWhereInput | boolean
  connect?: Prisma.SchoolDetailsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolDetailsUpdateToOneWithWhereWithoutSchoolInput, Prisma.SchoolDetailsUpdateWithoutSchoolInput>, Prisma.SchoolDetailsUncheckedUpdateWithoutSchoolInput>
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type SchoolDetailsCreateWithoutSchoolInput = {
  totalBatches?: number
  totalExams?: number
  totalStudents?: number
  totalTeachers?: number
}

export type SchoolDetailsUncheckedCreateWithoutSchoolInput = {
  totalBatches?: number
  totalExams?: number
  totalStudents?: number
  totalTeachers?: number
}

export type SchoolDetailsCreateOrConnectWithoutSchoolInput = {
  where: Prisma.SchoolDetailsWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
}

export type SchoolDetailsUpsertWithoutSchoolInput = {
  update: Prisma.XOR<Prisma.SchoolDetailsUpdateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.SchoolDetailsCreateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedCreateWithoutSchoolInput>
  where?: Prisma.SchoolDetailsWhereInput
}

export type SchoolDetailsUpdateToOneWithWhereWithoutSchoolInput = {
  where?: Prisma.SchoolDetailsWhereInput
  data: Prisma.XOR<Prisma.SchoolDetailsUpdateWithoutSchoolInput, Prisma.SchoolDetailsUncheckedUpdateWithoutSchoolInput>
}

export type SchoolDetailsUpdateWithoutSchoolInput = {
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
}

export type SchoolDetailsUncheckedUpdateWithoutSchoolInput = {
  totalBatches?: Prisma.IntFieldUpdateOperationsInput | number
  totalExams?: Prisma.IntFieldUpdateOperationsInput | number
  totalStudents?: Prisma.IntFieldUpdateOperationsInput | number
  totalTeachers?: Prisma.IntFieldUpdateOperationsInput | number
}



export type SchoolDetailsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  schoolId?: boolean
  totalBatches?: boolean
  totalExams?: boolean
  totalStudents?: boolean
  totalTeachers?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schoolDetails"]>

export type SchoolDetailsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  schoolId?: boolean
  totalBatches?: boolean
  totalExams?: boolean
  totalStudents?: boolean
  totalTeachers?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schoolDetails"]>

export type SchoolDetailsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  schoolId?: boolean
  totalBatches?: boolean
  totalExams?: boolean
  totalStudents?: boolean
  totalTeachers?: boolean
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schoolDetails"]>

export type SchoolDetailsSelectScalar = {
  schoolId?: boolean
  totalBatches?: boolean
  totalExams?: boolean
  totalStudents?: boolean
  totalTeachers?: boolean
}

export type SchoolDetailsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"schoolId" | "totalBatches" | "totalExams" | "totalStudents" | "totalTeachers", ExtArgs["result"]["schoolDetails"]>
export type SchoolDetailsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type SchoolDetailsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type SchoolDetailsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}

export type $SchoolDetailsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SchoolDetails"
  objects: {
    school: Prisma.$SchoolPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    schoolId: string
    totalBatches: number
    totalExams: number
    totalStudents: number
    totalTeachers: number
  }, ExtArgs["result"]["schoolDetails"]>
  composites: {}
}

export type SchoolDetailsGetPayload<S extends boolean | null | undefined | SchoolDetailsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload, S>

export type SchoolDetailsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SchoolDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SchoolDetailsCountAggregateInputType | true
  }

export interface SchoolDetailsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolDetails'], meta: { name: 'SchoolDetails' } }
  /**
   * Find zero or one SchoolDetails that matches the filter.
   * @param {SchoolDetailsFindUniqueArgs} args - Arguments to find a SchoolDetails
   * @example
   * // Get one SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SchoolDetailsFindUniqueArgs>(args: Prisma.SelectSubset<T, SchoolDetailsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SchoolDetails that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SchoolDetailsFindUniqueOrThrowArgs} args - Arguments to find a SchoolDetails
   * @example
   * // Get one SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SchoolDetailsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SchoolDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SchoolDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsFindFirstArgs} args - Arguments to find a SchoolDetails
   * @example
   * // Get one SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SchoolDetailsFindFirstArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SchoolDetails that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsFindFirstOrThrowArgs} args - Arguments to find a SchoolDetails
   * @example
   * // Get one SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SchoolDetailsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SchoolDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findMany()
   * 
   * // Get first 10 SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.findMany({ take: 10 })
   * 
   * // Only select the `schoolId`
   * const schoolDetailsWithSchoolIdOnly = await prisma.schoolDetails.findMany({ select: { schoolId: true } })
   * 
   */
  findMany<T extends SchoolDetailsFindManyArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SchoolDetails.
   * @param {SchoolDetailsCreateArgs} args - Arguments to create a SchoolDetails.
   * @example
   * // Create one SchoolDetails
   * const SchoolDetails = await prisma.schoolDetails.create({
   *   data: {
   *     // ... data to create a SchoolDetails
   *   }
   * })
   * 
   */
  create<T extends SchoolDetailsCreateArgs>(args: Prisma.SelectSubset<T, SchoolDetailsCreateArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SchoolDetails.
   * @param {SchoolDetailsCreateManyArgs} args - Arguments to create many SchoolDetails.
   * @example
   * // Create many SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SchoolDetailsCreateManyArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SchoolDetails and returns the data saved in the database.
   * @param {SchoolDetailsCreateManyAndReturnArgs} args - Arguments to create many SchoolDetails.
   * @example
   * // Create many SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SchoolDetails and only return the `schoolId`
   * const schoolDetailsWithSchoolIdOnly = await prisma.schoolDetails.createManyAndReturn({
   *   select: { schoolId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SchoolDetailsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SchoolDetails.
   * @param {SchoolDetailsDeleteArgs} args - Arguments to delete one SchoolDetails.
   * @example
   * // Delete one SchoolDetails
   * const SchoolDetails = await prisma.schoolDetails.delete({
   *   where: {
   *     // ... filter to delete one SchoolDetails
   *   }
   * })
   * 
   */
  delete<T extends SchoolDetailsDeleteArgs>(args: Prisma.SelectSubset<T, SchoolDetailsDeleteArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SchoolDetails.
   * @param {SchoolDetailsUpdateArgs} args - Arguments to update one SchoolDetails.
   * @example
   * // Update one SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SchoolDetailsUpdateArgs>(args: Prisma.SelectSubset<T, SchoolDetailsUpdateArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SchoolDetails.
   * @param {SchoolDetailsDeleteManyArgs} args - Arguments to filter SchoolDetails to delete.
   * @example
   * // Delete a few SchoolDetails
   * const { count } = await prisma.schoolDetails.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SchoolDetailsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SchoolDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SchoolDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SchoolDetailsUpdateManyArgs>(args: Prisma.SelectSubset<T, SchoolDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SchoolDetails and returns the data updated in the database.
   * @param {SchoolDetailsUpdateManyAndReturnArgs} args - Arguments to update many SchoolDetails.
   * @example
   * // Update many SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SchoolDetails and only return the `schoolId`
   * const schoolDetailsWithSchoolIdOnly = await prisma.schoolDetails.updateManyAndReturn({
   *   select: { schoolId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SchoolDetailsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SchoolDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SchoolDetails.
   * @param {SchoolDetailsUpsertArgs} args - Arguments to update or create a SchoolDetails.
   * @example
   * // Update or create a SchoolDetails
   * const schoolDetails = await prisma.schoolDetails.upsert({
   *   create: {
   *     // ... data to create a SchoolDetails
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SchoolDetails we want to update
   *   }
   * })
   */
  upsert<T extends SchoolDetailsUpsertArgs>(args: Prisma.SelectSubset<T, SchoolDetailsUpsertArgs<ExtArgs>>): Prisma.Prisma__SchoolDetailsClient<runtime.Types.Result.GetResult<Prisma.$SchoolDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SchoolDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsCountArgs} args - Arguments to filter SchoolDetails to count.
   * @example
   * // Count the number of SchoolDetails
   * const count = await prisma.schoolDetails.count({
   *   where: {
   *     // ... the filter for the SchoolDetails we want to count
   *   }
   * })
  **/
  count<T extends SchoolDetailsCountArgs>(
    args?: Prisma.Subset<T, SchoolDetailsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SchoolDetailsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SchoolDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SchoolDetailsAggregateArgs>(args: Prisma.Subset<T, SchoolDetailsAggregateArgs>): Prisma.PrismaPromise<GetSchoolDetailsAggregateType<T>>

  /**
   * Group by SchoolDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolDetailsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SchoolDetailsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SchoolDetailsGroupByArgs['orderBy'] }
      : { orderBy?: SchoolDetailsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SchoolDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SchoolDetails model
 */
readonly fields: SchoolDetailsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SchoolDetails.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SchoolDetailsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SchoolDetails model
 */
export interface SchoolDetailsFieldRefs {
  readonly schoolId: Prisma.FieldRef<"SchoolDetails", 'String'>
  readonly totalBatches: Prisma.FieldRef<"SchoolDetails", 'Int'>
  readonly totalExams: Prisma.FieldRef<"SchoolDetails", 'Int'>
  readonly totalStudents: Prisma.FieldRef<"SchoolDetails", 'Int'>
  readonly totalTeachers: Prisma.FieldRef<"SchoolDetails", 'Int'>
}
    

// Custom InputTypes
/**
 * SchoolDetails findUnique
 */
export type SchoolDetailsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter, which SchoolDetails to fetch.
   */
  where: Prisma.SchoolDetailsWhereUniqueInput
}

/**
 * SchoolDetails findUniqueOrThrow
 */
export type SchoolDetailsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter, which SchoolDetails to fetch.
   */
  where: Prisma.SchoolDetailsWhereUniqueInput
}

/**
 * SchoolDetails findFirst
 */
export type SchoolDetailsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter, which SchoolDetails to fetch.
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SchoolDetails to fetch.
   */
  orderBy?: Prisma.SchoolDetailsOrderByWithRelationInput | Prisma.SchoolDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SchoolDetails.
   */
  cursor?: Prisma.SchoolDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SchoolDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SchoolDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SchoolDetails.
   */
  distinct?: Prisma.SchoolDetailsScalarFieldEnum | Prisma.SchoolDetailsScalarFieldEnum[]
}

/**
 * SchoolDetails findFirstOrThrow
 */
export type SchoolDetailsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter, which SchoolDetails to fetch.
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SchoolDetails to fetch.
   */
  orderBy?: Prisma.SchoolDetailsOrderByWithRelationInput | Prisma.SchoolDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SchoolDetails.
   */
  cursor?: Prisma.SchoolDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SchoolDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SchoolDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SchoolDetails.
   */
  distinct?: Prisma.SchoolDetailsScalarFieldEnum | Prisma.SchoolDetailsScalarFieldEnum[]
}

/**
 * SchoolDetails findMany
 */
export type SchoolDetailsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter, which SchoolDetails to fetch.
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SchoolDetails to fetch.
   */
  orderBy?: Prisma.SchoolDetailsOrderByWithRelationInput | Prisma.SchoolDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SchoolDetails.
   */
  cursor?: Prisma.SchoolDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SchoolDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SchoolDetails.
   */
  skip?: number
  distinct?: Prisma.SchoolDetailsScalarFieldEnum | Prisma.SchoolDetailsScalarFieldEnum[]
}

/**
 * SchoolDetails create
 */
export type SchoolDetailsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * The data needed to create a SchoolDetails.
   */
  data: Prisma.XOR<Prisma.SchoolDetailsCreateInput, Prisma.SchoolDetailsUncheckedCreateInput>
}

/**
 * SchoolDetails createMany
 */
export type SchoolDetailsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SchoolDetails.
   */
  data: Prisma.SchoolDetailsCreateManyInput | Prisma.SchoolDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SchoolDetails createManyAndReturn
 */
export type SchoolDetailsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * The data used to create many SchoolDetails.
   */
  data: Prisma.SchoolDetailsCreateManyInput | Prisma.SchoolDetailsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * SchoolDetails update
 */
export type SchoolDetailsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * The data needed to update a SchoolDetails.
   */
  data: Prisma.XOR<Prisma.SchoolDetailsUpdateInput, Prisma.SchoolDetailsUncheckedUpdateInput>
  /**
   * Choose, which SchoolDetails to update.
   */
  where: Prisma.SchoolDetailsWhereUniqueInput
}

/**
 * SchoolDetails updateMany
 */
export type SchoolDetailsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SchoolDetails.
   */
  data: Prisma.XOR<Prisma.SchoolDetailsUpdateManyMutationInput, Prisma.SchoolDetailsUncheckedUpdateManyInput>
  /**
   * Filter which SchoolDetails to update
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * Limit how many SchoolDetails to update.
   */
  limit?: number
}

/**
 * SchoolDetails updateManyAndReturn
 */
export type SchoolDetailsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * The data used to update SchoolDetails.
   */
  data: Prisma.XOR<Prisma.SchoolDetailsUpdateManyMutationInput, Prisma.SchoolDetailsUncheckedUpdateManyInput>
  /**
   * Filter which SchoolDetails to update
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * Limit how many SchoolDetails to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * SchoolDetails upsert
 */
export type SchoolDetailsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * The filter to search for the SchoolDetails to update in case it exists.
   */
  where: Prisma.SchoolDetailsWhereUniqueInput
  /**
   * In case the SchoolDetails found by the `where` argument doesn't exist, create a new SchoolDetails with this data.
   */
  create: Prisma.XOR<Prisma.SchoolDetailsCreateInput, Prisma.SchoolDetailsUncheckedCreateInput>
  /**
   * In case the SchoolDetails was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SchoolDetailsUpdateInput, Prisma.SchoolDetailsUncheckedUpdateInput>
}

/**
 * SchoolDetails delete
 */
export type SchoolDetailsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
  /**
   * Filter which SchoolDetails to delete.
   */
  where: Prisma.SchoolDetailsWhereUniqueInput
}

/**
 * SchoolDetails deleteMany
 */
export type SchoolDetailsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SchoolDetails to delete
   */
  where?: Prisma.SchoolDetailsWhereInput
  /**
   * Limit how many SchoolDetails to delete.
   */
  limit?: number
}

/**
 * SchoolDetails without action
 */
export type SchoolDetailsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolDetails
   */
  select?: Prisma.SchoolDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SchoolDetails
   */
  omit?: Prisma.SchoolDetailsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolDetailsInclude<ExtArgs> | null
}
