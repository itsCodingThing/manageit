
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Batch` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Batch
 * 
 */
export type BatchModel = runtime.Types.Result.DefaultSelection<Prisma.$BatchPayload>

export type AggregateBatch = {
  _count: BatchCountAggregateOutputType | null
  _min: BatchMinAggregateOutputType | null
  _max: BatchMaxAggregateOutputType | null
}

export type BatchMinAggregateOutputType = {
  id: string | null
  schoolId: string | null
  name: string | null
  image: string | null
  createdAt: Date | null
}

export type BatchMaxAggregateOutputType = {
  id: string | null
  schoolId: string | null
  name: string | null
  image: string | null
  createdAt: Date | null
}

export type BatchCountAggregateOutputType = {
  id: number
  schoolId: number
  name: number
  image: number
  teachers: number
  students: number
  createdAt: number
  _all: number
}


export type BatchMinAggregateInputType = {
  id?: true
  schoolId?: true
  name?: true
  image?: true
  createdAt?: true
}

export type BatchMaxAggregateInputType = {
  id?: true
  schoolId?: true
  name?: true
  image?: true
  createdAt?: true
}

export type BatchCountAggregateInputType = {
  id?: true
  schoolId?: true
  name?: true
  image?: true
  teachers?: true
  students?: true
  createdAt?: true
  _all?: true
}

export type BatchAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Batch to aggregate.
   */
  where?: Prisma.BatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Batches to fetch.
   */
  orderBy?: Prisma.BatchOrderByWithRelationInput | Prisma.BatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Batches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Batches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Batches
  **/
  _count?: true | BatchCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BatchMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BatchMaxAggregateInputType
}

export type GetBatchAggregateType<T extends BatchAggregateArgs> = {
      [P in keyof T & keyof AggregateBatch]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBatch[P]>
    : Prisma.GetScalarType<T[P], AggregateBatch[P]>
}




export type BatchGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BatchWhereInput
  orderBy?: Prisma.BatchOrderByWithAggregationInput | Prisma.BatchOrderByWithAggregationInput[]
  by: Prisma.BatchScalarFieldEnum[] | Prisma.BatchScalarFieldEnum
  having?: Prisma.BatchScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BatchCountAggregateInputType | true
  _min?: BatchMinAggregateInputType
  _max?: BatchMaxAggregateInputType
}

export type BatchGroupByOutputType = {
  id: string
  schoolId: string
  name: string
  image: string | null
  teachers: string[]
  students: string[]
  createdAt: Date
  _count: BatchCountAggregateOutputType | null
  _min: BatchMinAggregateOutputType | null
  _max: BatchMaxAggregateOutputType | null
}

type GetBatchGroupByPayload<T extends BatchGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BatchGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BatchGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BatchGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BatchGroupByOutputType[P]>
      }
    >
  >



export type BatchWhereInput = {
  AND?: Prisma.BatchWhereInput | Prisma.BatchWhereInput[]
  OR?: Prisma.BatchWhereInput[]
  NOT?: Prisma.BatchWhereInput | Prisma.BatchWhereInput[]
  id?: Prisma.StringFilter<"Batch"> | string
  schoolId?: Prisma.StringFilter<"Batch"> | string
  name?: Prisma.StringFilter<"Batch"> | string
  image?: Prisma.StringNullableFilter<"Batch"> | string | null
  teachers?: Prisma.StringNullableListFilter<"Batch">
  students?: Prisma.StringNullableListFilter<"Batch">
  createdAt?: Prisma.DateTimeFilter<"Batch"> | Date | string
}

export type BatchOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  teachers?: Prisma.SortOrder
  students?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BatchWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BatchWhereInput | Prisma.BatchWhereInput[]
  OR?: Prisma.BatchWhereInput[]
  NOT?: Prisma.BatchWhereInput | Prisma.BatchWhereInput[]
  schoolId?: Prisma.StringFilter<"Batch"> | string
  name?: Prisma.StringFilter<"Batch"> | string
  image?: Prisma.StringNullableFilter<"Batch"> | string | null
  teachers?: Prisma.StringNullableListFilter<"Batch">
  students?: Prisma.StringNullableListFilter<"Batch">
  createdAt?: Prisma.DateTimeFilter<"Batch"> | Date | string
}, "id">

export type BatchOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  teachers?: Prisma.SortOrder
  students?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.BatchCountOrderByAggregateInput
  _max?: Prisma.BatchMaxOrderByAggregateInput
  _min?: Prisma.BatchMinOrderByAggregateInput
}

export type BatchScalarWhereWithAggregatesInput = {
  AND?: Prisma.BatchScalarWhereWithAggregatesInput | Prisma.BatchScalarWhereWithAggregatesInput[]
  OR?: Prisma.BatchScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BatchScalarWhereWithAggregatesInput | Prisma.BatchScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Batch"> | string
  schoolId?: Prisma.StringWithAggregatesFilter<"Batch"> | string
  name?: Prisma.StringWithAggregatesFilter<"Batch"> | string
  image?: Prisma.StringNullableWithAggregatesFilter<"Batch"> | string | null
  teachers?: Prisma.StringNullableListFilter<"Batch">
  students?: Prisma.StringNullableListFilter<"Batch">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Batch"> | Date | string
}

export type BatchCreateInput = {
  id?: string
  schoolId: string
  name: string
  image?: string | null
  teachers?: Prisma.BatchCreateteachersInput | string[]
  students?: Prisma.BatchCreatestudentsInput | string[]
  createdAt?: Date | string
}

export type BatchUncheckedCreateInput = {
  id?: string
  schoolId: string
  name: string
  image?: string | null
  teachers?: Prisma.BatchCreateteachersInput | string[]
  students?: Prisma.BatchCreatestudentsInput | string[]
  createdAt?: Date | string
}

export type BatchUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachers?: Prisma.BatchUpdateteachersInput | string[]
  students?: Prisma.BatchUpdatestudentsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BatchUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachers?: Prisma.BatchUpdateteachersInput | string[]
  students?: Prisma.BatchUpdatestudentsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BatchCreateManyInput = {
  id?: string
  schoolId: string
  name: string
  image?: string | null
  teachers?: Prisma.BatchCreateteachersInput | string[]
  students?: Prisma.BatchCreatestudentsInput | string[]
  createdAt?: Date | string
}

export type BatchUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachers?: Prisma.BatchUpdateteachersInput | string[]
  students?: Prisma.BatchUpdatestudentsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BatchUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  schoolId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  teachers?: Prisma.BatchUpdateteachersInput | string[]
  students?: Prisma.BatchUpdatestudentsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type BatchCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image?: Prisma.SortOrder
  teachers?: Prisma.SortOrder
  students?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BatchMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BatchMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  schoolId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BatchCreateteachersInput = {
  set: string[]
}

export type BatchCreatestudentsInput = {
  set: string[]
}

export type BatchUpdateteachersInput = {
  set?: string[]
  push?: string | string[]
}

export type BatchUpdatestudentsInput = {
  set?: string[]
  push?: string | string[]
}



export type BatchSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  name?: boolean
  image?: boolean
  teachers?: boolean
  students?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["batch"]>

export type BatchSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  name?: boolean
  image?: boolean
  teachers?: boolean
  students?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["batch"]>

export type BatchSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  schoolId?: boolean
  name?: boolean
  image?: boolean
  teachers?: boolean
  students?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["batch"]>

export type BatchSelectScalar = {
  id?: boolean
  schoolId?: boolean
  name?: boolean
  image?: boolean
  teachers?: boolean
  students?: boolean
  createdAt?: boolean
}

export type BatchOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "schoolId" | "name" | "image" | "teachers" | "students" | "createdAt", ExtArgs["result"]["batch"]>

export type $BatchPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Batch"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    schoolId: string
    name: string
    image: string | null
    teachers: string[]
    students: string[]
    createdAt: Date
  }, ExtArgs["result"]["batch"]>
  composites: {}
}

export type BatchGetPayload<S extends boolean | null | undefined | BatchDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BatchPayload, S>

export type BatchCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BatchCountAggregateInputType | true
  }

export interface BatchDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Batch'], meta: { name: 'Batch' } }
  /**
   * Find zero or one Batch that matches the filter.
   * @param {BatchFindUniqueArgs} args - Arguments to find a Batch
   * @example
   * // Get one Batch
   * const batch = await prisma.batch.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BatchFindUniqueArgs>(args: Prisma.SelectSubset<T, BatchFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Batch that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BatchFindUniqueOrThrowArgs} args - Arguments to find a Batch
   * @example
   * // Get one Batch
   * const batch = await prisma.batch.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BatchFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Batch that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchFindFirstArgs} args - Arguments to find a Batch
   * @example
   * // Get one Batch
   * const batch = await prisma.batch.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BatchFindFirstArgs>(args?: Prisma.SelectSubset<T, BatchFindFirstArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Batch that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchFindFirstOrThrowArgs} args - Arguments to find a Batch
   * @example
   * // Get one Batch
   * const batch = await prisma.batch.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BatchFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BatchFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Batches that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Batches
   * const batches = await prisma.batch.findMany()
   * 
   * // Get first 10 Batches
   * const batches = await prisma.batch.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const batchWithIdOnly = await prisma.batch.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BatchFindManyArgs>(args?: Prisma.SelectSubset<T, BatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Batch.
   * @param {BatchCreateArgs} args - Arguments to create a Batch.
   * @example
   * // Create one Batch
   * const Batch = await prisma.batch.create({
   *   data: {
   *     // ... data to create a Batch
   *   }
   * })
   * 
   */
  create<T extends BatchCreateArgs>(args: Prisma.SelectSubset<T, BatchCreateArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Batches.
   * @param {BatchCreateManyArgs} args - Arguments to create many Batches.
   * @example
   * // Create many Batches
   * const batch = await prisma.batch.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BatchCreateManyArgs>(args?: Prisma.SelectSubset<T, BatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Batches and returns the data saved in the database.
   * @param {BatchCreateManyAndReturnArgs} args - Arguments to create many Batches.
   * @example
   * // Create many Batches
   * const batch = await prisma.batch.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Batches and only return the `id`
   * const batchWithIdOnly = await prisma.batch.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BatchCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Batch.
   * @param {BatchDeleteArgs} args - Arguments to delete one Batch.
   * @example
   * // Delete one Batch
   * const Batch = await prisma.batch.delete({
   *   where: {
   *     // ... filter to delete one Batch
   *   }
   * })
   * 
   */
  delete<T extends BatchDeleteArgs>(args: Prisma.SelectSubset<T, BatchDeleteArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Batch.
   * @param {BatchUpdateArgs} args - Arguments to update one Batch.
   * @example
   * // Update one Batch
   * const batch = await prisma.batch.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BatchUpdateArgs>(args: Prisma.SelectSubset<T, BatchUpdateArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Batches.
   * @param {BatchDeleteManyArgs} args - Arguments to filter Batches to delete.
   * @example
   * // Delete a few Batches
   * const { count } = await prisma.batch.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BatchDeleteManyArgs>(args?: Prisma.SelectSubset<T, BatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Batches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Batches
   * const batch = await prisma.batch.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BatchUpdateManyArgs>(args: Prisma.SelectSubset<T, BatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Batches and returns the data updated in the database.
   * @param {BatchUpdateManyAndReturnArgs} args - Arguments to update many Batches.
   * @example
   * // Update many Batches
   * const batch = await prisma.batch.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Batches and only return the `id`
   * const batchWithIdOnly = await prisma.batch.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BatchUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Batch.
   * @param {BatchUpsertArgs} args - Arguments to update or create a Batch.
   * @example
   * // Update or create a Batch
   * const batch = await prisma.batch.upsert({
   *   create: {
   *     // ... data to create a Batch
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Batch we want to update
   *   }
   * })
   */
  upsert<T extends BatchUpsertArgs>(args: Prisma.SelectSubset<T, BatchUpsertArgs<ExtArgs>>): Prisma.Prisma__BatchClient<runtime.Types.Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Batches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchCountArgs} args - Arguments to filter Batches to count.
   * @example
   * // Count the number of Batches
   * const count = await prisma.batch.count({
   *   where: {
   *     // ... the filter for the Batches we want to count
   *   }
   * })
  **/
  count<T extends BatchCountArgs>(
    args?: Prisma.Subset<T, BatchCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BatchCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Batch.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BatchAggregateArgs>(args: Prisma.Subset<T, BatchAggregateArgs>): Prisma.PrismaPromise<GetBatchAggregateType<T>>

  /**
   * Group by Batch.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BatchGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BatchGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BatchGroupByArgs['orderBy'] }
      : { orderBy?: BatchGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Batch model
 */
readonly fields: BatchFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Batch.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BatchClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Batch model
 */
export interface BatchFieldRefs {
  readonly id: Prisma.FieldRef<"Batch", 'String'>
  readonly schoolId: Prisma.FieldRef<"Batch", 'String'>
  readonly name: Prisma.FieldRef<"Batch", 'String'>
  readonly image: Prisma.FieldRef<"Batch", 'String'>
  readonly teachers: Prisma.FieldRef<"Batch", 'String[]'>
  readonly students: Prisma.FieldRef<"Batch", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"Batch", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Batch findUnique
 */
export type BatchFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter, which Batch to fetch.
   */
  where: Prisma.BatchWhereUniqueInput
}

/**
 * Batch findUniqueOrThrow
 */
export type BatchFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter, which Batch to fetch.
   */
  where: Prisma.BatchWhereUniqueInput
}

/**
 * Batch findFirst
 */
export type BatchFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter, which Batch to fetch.
   */
  where?: Prisma.BatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Batches to fetch.
   */
  orderBy?: Prisma.BatchOrderByWithRelationInput | Prisma.BatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Batches.
   */
  cursor?: Prisma.BatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Batches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Batches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Batches.
   */
  distinct?: Prisma.BatchScalarFieldEnum | Prisma.BatchScalarFieldEnum[]
}

/**
 * Batch findFirstOrThrow
 */
export type BatchFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter, which Batch to fetch.
   */
  where?: Prisma.BatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Batches to fetch.
   */
  orderBy?: Prisma.BatchOrderByWithRelationInput | Prisma.BatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Batches.
   */
  cursor?: Prisma.BatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Batches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Batches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Batches.
   */
  distinct?: Prisma.BatchScalarFieldEnum | Prisma.BatchScalarFieldEnum[]
}

/**
 * Batch findMany
 */
export type BatchFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter, which Batches to fetch.
   */
  where?: Prisma.BatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Batches to fetch.
   */
  orderBy?: Prisma.BatchOrderByWithRelationInput | Prisma.BatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Batches.
   */
  cursor?: Prisma.BatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Batches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Batches.
   */
  skip?: number
  distinct?: Prisma.BatchScalarFieldEnum | Prisma.BatchScalarFieldEnum[]
}

/**
 * Batch create
 */
export type BatchCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * The data needed to create a Batch.
   */
  data: Prisma.XOR<Prisma.BatchCreateInput, Prisma.BatchUncheckedCreateInput>
}

/**
 * Batch createMany
 */
export type BatchCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Batches.
   */
  data: Prisma.BatchCreateManyInput | Prisma.BatchCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Batch createManyAndReturn
 */
export type BatchCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * The data used to create many Batches.
   */
  data: Prisma.BatchCreateManyInput | Prisma.BatchCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Batch update
 */
export type BatchUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * The data needed to update a Batch.
   */
  data: Prisma.XOR<Prisma.BatchUpdateInput, Prisma.BatchUncheckedUpdateInput>
  /**
   * Choose, which Batch to update.
   */
  where: Prisma.BatchWhereUniqueInput
}

/**
 * Batch updateMany
 */
export type BatchUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Batches.
   */
  data: Prisma.XOR<Prisma.BatchUpdateManyMutationInput, Prisma.BatchUncheckedUpdateManyInput>
  /**
   * Filter which Batches to update
   */
  where?: Prisma.BatchWhereInput
  /**
   * Limit how many Batches to update.
   */
  limit?: number
}

/**
 * Batch updateManyAndReturn
 */
export type BatchUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * The data used to update Batches.
   */
  data: Prisma.XOR<Prisma.BatchUpdateManyMutationInput, Prisma.BatchUncheckedUpdateManyInput>
  /**
   * Filter which Batches to update
   */
  where?: Prisma.BatchWhereInput
  /**
   * Limit how many Batches to update.
   */
  limit?: number
}

/**
 * Batch upsert
 */
export type BatchUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * The filter to search for the Batch to update in case it exists.
   */
  where: Prisma.BatchWhereUniqueInput
  /**
   * In case the Batch found by the `where` argument doesn't exist, create a new Batch with this data.
   */
  create: Prisma.XOR<Prisma.BatchCreateInput, Prisma.BatchUncheckedCreateInput>
  /**
   * In case the Batch was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BatchUpdateInput, Prisma.BatchUncheckedUpdateInput>
}

/**
 * Batch delete
 */
export type BatchDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
  /**
   * Filter which Batch to delete.
   */
  where: Prisma.BatchWhereUniqueInput
}

/**
 * Batch deleteMany
 */
export type BatchDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Batches to delete
   */
  where?: Prisma.BatchWhereInput
  /**
   * Limit how many Batches to delete.
   */
  limit?: number
}

/**
 * Batch without action
 */
export type BatchDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Batch
   */
  select?: Prisma.BatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Batch
   */
  omit?: Prisma.BatchOmit<ExtArgs> | null
}
