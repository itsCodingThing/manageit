
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StudentExamDetails` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model StudentExamDetails
 * 
 */
export type StudentExamDetailsModel = runtime.Types.Result.DefaultSelection<Prisma.$StudentExamDetailsPayload>

export type AggregateStudentExamDetails = {
  _count: StudentExamDetailsCountAggregateOutputType | null
  _min: StudentExamDetailsMinAggregateOutputType | null
  _max: StudentExamDetailsMaxAggregateOutputType | null
}

export type StudentExamDetailsMinAggregateOutputType = {
  id: string | null
  studentId: string | null
  createdAt: Date | null
}

export type StudentExamDetailsMaxAggregateOutputType = {
  id: string | null
  studentId: string | null
  createdAt: Date | null
}

export type StudentExamDetailsCountAggregateOutputType = {
  id: number
  studentId: number
  activeExams: number
  createdAt: number
  _all: number
}


export type StudentExamDetailsMinAggregateInputType = {
  id?: true
  studentId?: true
  createdAt?: true
}

export type StudentExamDetailsMaxAggregateInputType = {
  id?: true
  studentId?: true
  createdAt?: true
}

export type StudentExamDetailsCountAggregateInputType = {
  id?: true
  studentId?: true
  activeExams?: true
  createdAt?: true
  _all?: true
}

export type StudentExamDetailsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StudentExamDetails to aggregate.
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StudentExamDetails to fetch.
   */
  orderBy?: Prisma.StudentExamDetailsOrderByWithRelationInput | Prisma.StudentExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StudentExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StudentExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StudentExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StudentExamDetails
  **/
  _count?: true | StudentExamDetailsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StudentExamDetailsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StudentExamDetailsMaxAggregateInputType
}

export type GetStudentExamDetailsAggregateType<T extends StudentExamDetailsAggregateArgs> = {
      [P in keyof T & keyof AggregateStudentExamDetails]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStudentExamDetails[P]>
    : Prisma.GetScalarType<T[P], AggregateStudentExamDetails[P]>
}




export type StudentExamDetailsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StudentExamDetailsWhereInput
  orderBy?: Prisma.StudentExamDetailsOrderByWithAggregationInput | Prisma.StudentExamDetailsOrderByWithAggregationInput[]
  by: Prisma.StudentExamDetailsScalarFieldEnum[] | Prisma.StudentExamDetailsScalarFieldEnum
  having?: Prisma.StudentExamDetailsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StudentExamDetailsCountAggregateInputType | true
  _min?: StudentExamDetailsMinAggregateInputType
  _max?: StudentExamDetailsMaxAggregateInputType
}

export type StudentExamDetailsGroupByOutputType = {
  id: string
  studentId: string
  activeExams: string[]
  createdAt: Date
  _count: StudentExamDetailsCountAggregateOutputType | null
  _min: StudentExamDetailsMinAggregateOutputType | null
  _max: StudentExamDetailsMaxAggregateOutputType | null
}

type GetStudentExamDetailsGroupByPayload<T extends StudentExamDetailsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StudentExamDetailsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StudentExamDetailsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StudentExamDetailsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StudentExamDetailsGroupByOutputType[P]>
      }
    >
  >



export type StudentExamDetailsWhereInput = {
  AND?: Prisma.StudentExamDetailsWhereInput | Prisma.StudentExamDetailsWhereInput[]
  OR?: Prisma.StudentExamDetailsWhereInput[]
  NOT?: Prisma.StudentExamDetailsWhereInput | Prisma.StudentExamDetailsWhereInput[]
  id?: Prisma.StringFilter<"StudentExamDetails"> | string
  studentId?: Prisma.StringFilter<"StudentExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"StudentExamDetails">
  createdAt?: Prisma.DateTimeFilter<"StudentExamDetails"> | Date | string
}

export type StudentExamDetailsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StudentExamDetailsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StudentExamDetailsWhereInput | Prisma.StudentExamDetailsWhereInput[]
  OR?: Prisma.StudentExamDetailsWhereInput[]
  NOT?: Prisma.StudentExamDetailsWhereInput | Prisma.StudentExamDetailsWhereInput[]
  studentId?: Prisma.StringFilter<"StudentExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"StudentExamDetails">
  createdAt?: Prisma.DateTimeFilter<"StudentExamDetails"> | Date | string
}, "id">

export type StudentExamDetailsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StudentExamDetailsCountOrderByAggregateInput
  _max?: Prisma.StudentExamDetailsMaxOrderByAggregateInput
  _min?: Prisma.StudentExamDetailsMinOrderByAggregateInput
}

export type StudentExamDetailsScalarWhereWithAggregatesInput = {
  AND?: Prisma.StudentExamDetailsScalarWhereWithAggregatesInput | Prisma.StudentExamDetailsScalarWhereWithAggregatesInput[]
  OR?: Prisma.StudentExamDetailsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StudentExamDetailsScalarWhereWithAggregatesInput | Prisma.StudentExamDetailsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StudentExamDetails"> | string
  studentId?: Prisma.StringWithAggregatesFilter<"StudentExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"StudentExamDetails">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StudentExamDetails"> | Date | string
}

export type StudentExamDetailsCreateInput = {
  id?: string
  studentId: string
  activeExams?: Prisma.StudentExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type StudentExamDetailsUncheckedCreateInput = {
  id?: string
  studentId: string
  activeExams?: Prisma.StudentExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type StudentExamDetailsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.StudentExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StudentExamDetailsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.StudentExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StudentExamDetailsCreateManyInput = {
  id?: string
  studentId: string
  activeExams?: Prisma.StudentExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type StudentExamDetailsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.StudentExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StudentExamDetailsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  studentId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.StudentExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StudentExamDetailsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StudentExamDetailsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StudentExamDetailsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  studentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StudentExamDetailsCreateactiveExamsInput = {
  set: string[]
}

export type StudentExamDetailsUpdateactiveExamsInput = {
  set?: string[]
  push?: string | string[]
}



export type StudentExamDetailsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["studentExamDetails"]>

export type StudentExamDetailsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["studentExamDetails"]>

export type StudentExamDetailsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  studentId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["studentExamDetails"]>

export type StudentExamDetailsSelectScalar = {
  id?: boolean
  studentId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}

export type StudentExamDetailsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "studentId" | "activeExams" | "createdAt", ExtArgs["result"]["studentExamDetails"]>

export type $StudentExamDetailsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StudentExamDetails"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    studentId: string
    activeExams: string[]
    createdAt: Date
  }, ExtArgs["result"]["studentExamDetails"]>
  composites: {}
}

export type StudentExamDetailsGetPayload<S extends boolean | null | undefined | StudentExamDetailsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload, S>

export type StudentExamDetailsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StudentExamDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StudentExamDetailsCountAggregateInputType | true
  }

export interface StudentExamDetailsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentExamDetails'], meta: { name: 'StudentExamDetails' } }
  /**
   * Find zero or one StudentExamDetails that matches the filter.
   * @param {StudentExamDetailsFindUniqueArgs} args - Arguments to find a StudentExamDetails
   * @example
   * // Get one StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StudentExamDetailsFindUniqueArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StudentExamDetails that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StudentExamDetailsFindUniqueOrThrowArgs} args - Arguments to find a StudentExamDetails
   * @example
   * // Get one StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StudentExamDetailsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StudentExamDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsFindFirstArgs} args - Arguments to find a StudentExamDetails
   * @example
   * // Get one StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StudentExamDetailsFindFirstArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsFindFirstArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StudentExamDetails that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsFindFirstOrThrowArgs} args - Arguments to find a StudentExamDetails
   * @example
   * // Get one StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StudentExamDetailsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StudentExamDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findMany()
   * 
   * // Get first 10 StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const studentExamDetailsWithIdOnly = await prisma.studentExamDetails.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StudentExamDetailsFindManyArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StudentExamDetails.
   * @param {StudentExamDetailsCreateArgs} args - Arguments to create a StudentExamDetails.
   * @example
   * // Create one StudentExamDetails
   * const StudentExamDetails = await prisma.studentExamDetails.create({
   *   data: {
   *     // ... data to create a StudentExamDetails
   *   }
   * })
   * 
   */
  create<T extends StudentExamDetailsCreateArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsCreateArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StudentExamDetails.
   * @param {StudentExamDetailsCreateManyArgs} args - Arguments to create many StudentExamDetails.
   * @example
   * // Create many StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StudentExamDetailsCreateManyArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StudentExamDetails and returns the data saved in the database.
   * @param {StudentExamDetailsCreateManyAndReturnArgs} args - Arguments to create many StudentExamDetails.
   * @example
   * // Create many StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StudentExamDetails and only return the `id`
   * const studentExamDetailsWithIdOnly = await prisma.studentExamDetails.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StudentExamDetailsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StudentExamDetails.
   * @param {StudentExamDetailsDeleteArgs} args - Arguments to delete one StudentExamDetails.
   * @example
   * // Delete one StudentExamDetails
   * const StudentExamDetails = await prisma.studentExamDetails.delete({
   *   where: {
   *     // ... filter to delete one StudentExamDetails
   *   }
   * })
   * 
   */
  delete<T extends StudentExamDetailsDeleteArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsDeleteArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StudentExamDetails.
   * @param {StudentExamDetailsUpdateArgs} args - Arguments to update one StudentExamDetails.
   * @example
   * // Update one StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StudentExamDetailsUpdateArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsUpdateArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StudentExamDetails.
   * @param {StudentExamDetailsDeleteManyArgs} args - Arguments to filter StudentExamDetails to delete.
   * @example
   * // Delete a few StudentExamDetails
   * const { count } = await prisma.studentExamDetails.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StudentExamDetailsDeleteManyArgs>(args?: Prisma.SelectSubset<T, StudentExamDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StudentExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StudentExamDetailsUpdateManyArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StudentExamDetails and returns the data updated in the database.
   * @param {StudentExamDetailsUpdateManyAndReturnArgs} args - Arguments to update many StudentExamDetails.
   * @example
   * // Update many StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StudentExamDetails and only return the `id`
   * const studentExamDetailsWithIdOnly = await prisma.studentExamDetails.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StudentExamDetailsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StudentExamDetails.
   * @param {StudentExamDetailsUpsertArgs} args - Arguments to update or create a StudentExamDetails.
   * @example
   * // Update or create a StudentExamDetails
   * const studentExamDetails = await prisma.studentExamDetails.upsert({
   *   create: {
   *     // ... data to create a StudentExamDetails
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StudentExamDetails we want to update
   *   }
   * })
   */
  upsert<T extends StudentExamDetailsUpsertArgs>(args: Prisma.SelectSubset<T, StudentExamDetailsUpsertArgs<ExtArgs>>): Prisma.Prisma__StudentExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$StudentExamDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StudentExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsCountArgs} args - Arguments to filter StudentExamDetails to count.
   * @example
   * // Count the number of StudentExamDetails
   * const count = await prisma.studentExamDetails.count({
   *   where: {
   *     // ... the filter for the StudentExamDetails we want to count
   *   }
   * })
  **/
  count<T extends StudentExamDetailsCountArgs>(
    args?: Prisma.Subset<T, StudentExamDetailsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StudentExamDetailsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StudentExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StudentExamDetailsAggregateArgs>(args: Prisma.Subset<T, StudentExamDetailsAggregateArgs>): Prisma.PrismaPromise<GetStudentExamDetailsAggregateType<T>>

  /**
   * Group by StudentExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StudentExamDetailsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StudentExamDetailsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StudentExamDetailsGroupByArgs['orderBy'] }
      : { orderBy?: StudentExamDetailsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StudentExamDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentExamDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StudentExamDetails model
 */
readonly fields: StudentExamDetailsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StudentExamDetails.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StudentExamDetailsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StudentExamDetails model
 */
export interface StudentExamDetailsFieldRefs {
  readonly id: Prisma.FieldRef<"StudentExamDetails", 'String'>
  readonly studentId: Prisma.FieldRef<"StudentExamDetails", 'String'>
  readonly activeExams: Prisma.FieldRef<"StudentExamDetails", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"StudentExamDetails", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StudentExamDetails findUnique
 */
export type StudentExamDetailsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which StudentExamDetails to fetch.
   */
  where: Prisma.StudentExamDetailsWhereUniqueInput
}

/**
 * StudentExamDetails findUniqueOrThrow
 */
export type StudentExamDetailsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which StudentExamDetails to fetch.
   */
  where: Prisma.StudentExamDetailsWhereUniqueInput
}

/**
 * StudentExamDetails findFirst
 */
export type StudentExamDetailsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which StudentExamDetails to fetch.
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StudentExamDetails to fetch.
   */
  orderBy?: Prisma.StudentExamDetailsOrderByWithRelationInput | Prisma.StudentExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StudentExamDetails.
   */
  cursor?: Prisma.StudentExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StudentExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StudentExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StudentExamDetails.
   */
  distinct?: Prisma.StudentExamDetailsScalarFieldEnum | Prisma.StudentExamDetailsScalarFieldEnum[]
}

/**
 * StudentExamDetails findFirstOrThrow
 */
export type StudentExamDetailsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which StudentExamDetails to fetch.
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StudentExamDetails to fetch.
   */
  orderBy?: Prisma.StudentExamDetailsOrderByWithRelationInput | Prisma.StudentExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StudentExamDetails.
   */
  cursor?: Prisma.StudentExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StudentExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StudentExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StudentExamDetails.
   */
  distinct?: Prisma.StudentExamDetailsScalarFieldEnum | Prisma.StudentExamDetailsScalarFieldEnum[]
}

/**
 * StudentExamDetails findMany
 */
export type StudentExamDetailsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which StudentExamDetails to fetch.
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StudentExamDetails to fetch.
   */
  orderBy?: Prisma.StudentExamDetailsOrderByWithRelationInput | Prisma.StudentExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StudentExamDetails.
   */
  cursor?: Prisma.StudentExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StudentExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StudentExamDetails.
   */
  skip?: number
  distinct?: Prisma.StudentExamDetailsScalarFieldEnum | Prisma.StudentExamDetailsScalarFieldEnum[]
}

/**
 * StudentExamDetails create
 */
export type StudentExamDetailsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * The data needed to create a StudentExamDetails.
   */
  data: Prisma.XOR<Prisma.StudentExamDetailsCreateInput, Prisma.StudentExamDetailsUncheckedCreateInput>
}

/**
 * StudentExamDetails createMany
 */
export type StudentExamDetailsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StudentExamDetails.
   */
  data: Prisma.StudentExamDetailsCreateManyInput | Prisma.StudentExamDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StudentExamDetails createManyAndReturn
 */
export type StudentExamDetailsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * The data used to create many StudentExamDetails.
   */
  data: Prisma.StudentExamDetailsCreateManyInput | Prisma.StudentExamDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StudentExamDetails update
 */
export type StudentExamDetailsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * The data needed to update a StudentExamDetails.
   */
  data: Prisma.XOR<Prisma.StudentExamDetailsUpdateInput, Prisma.StudentExamDetailsUncheckedUpdateInput>
  /**
   * Choose, which StudentExamDetails to update.
   */
  where: Prisma.StudentExamDetailsWhereUniqueInput
}

/**
 * StudentExamDetails updateMany
 */
export type StudentExamDetailsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StudentExamDetails.
   */
  data: Prisma.XOR<Prisma.StudentExamDetailsUpdateManyMutationInput, Prisma.StudentExamDetailsUncheckedUpdateManyInput>
  /**
   * Filter which StudentExamDetails to update
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * Limit how many StudentExamDetails to update.
   */
  limit?: number
}

/**
 * StudentExamDetails updateManyAndReturn
 */
export type StudentExamDetailsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * The data used to update StudentExamDetails.
   */
  data: Prisma.XOR<Prisma.StudentExamDetailsUpdateManyMutationInput, Prisma.StudentExamDetailsUncheckedUpdateManyInput>
  /**
   * Filter which StudentExamDetails to update
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * Limit how many StudentExamDetails to update.
   */
  limit?: number
}

/**
 * StudentExamDetails upsert
 */
export type StudentExamDetailsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * The filter to search for the StudentExamDetails to update in case it exists.
   */
  where: Prisma.StudentExamDetailsWhereUniqueInput
  /**
   * In case the StudentExamDetails found by the `where` argument doesn't exist, create a new StudentExamDetails with this data.
   */
  create: Prisma.XOR<Prisma.StudentExamDetailsCreateInput, Prisma.StudentExamDetailsUncheckedCreateInput>
  /**
   * In case the StudentExamDetails was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StudentExamDetailsUpdateInput, Prisma.StudentExamDetailsUncheckedUpdateInput>
}

/**
 * StudentExamDetails delete
 */
export type StudentExamDetailsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
  /**
   * Filter which StudentExamDetails to delete.
   */
  where: Prisma.StudentExamDetailsWhereUniqueInput
}

/**
 * StudentExamDetails deleteMany
 */
export type StudentExamDetailsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StudentExamDetails to delete
   */
  where?: Prisma.StudentExamDetailsWhereInput
  /**
   * Limit how many StudentExamDetails to delete.
   */
  limit?: number
}

/**
 * StudentExamDetails without action
 */
export type StudentExamDetailsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StudentExamDetails
   */
  select?: Prisma.StudentExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StudentExamDetails
   */
  omit?: Prisma.StudentExamDetailsOmit<ExtArgs> | null
}
