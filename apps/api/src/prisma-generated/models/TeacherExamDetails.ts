
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TeacherExamDetails` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TeacherExamDetails
 * 
 */
export type TeacherExamDetailsModel = runtime.Types.Result.DefaultSelection<Prisma.$TeacherExamDetailsPayload>

export type AggregateTeacherExamDetails = {
  _count: TeacherExamDetailsCountAggregateOutputType | null
  _min: TeacherExamDetailsMinAggregateOutputType | null
  _max: TeacherExamDetailsMaxAggregateOutputType | null
}

export type TeacherExamDetailsMinAggregateOutputType = {
  id: string | null
  teacherId: string | null
  createdAt: Date | null
}

export type TeacherExamDetailsMaxAggregateOutputType = {
  id: string | null
  teacherId: string | null
  createdAt: Date | null
}

export type TeacherExamDetailsCountAggregateOutputType = {
  id: number
  teacherId: number
  activeExams: number
  createdAt: number
  _all: number
}


export type TeacherExamDetailsMinAggregateInputType = {
  id?: true
  teacherId?: true
  createdAt?: true
}

export type TeacherExamDetailsMaxAggregateInputType = {
  id?: true
  teacherId?: true
  createdAt?: true
}

export type TeacherExamDetailsCountAggregateInputType = {
  id?: true
  teacherId?: true
  activeExams?: true
  createdAt?: true
  _all?: true
}

export type TeacherExamDetailsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherExamDetails to aggregate.
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherExamDetails to fetch.
   */
  orderBy?: Prisma.TeacherExamDetailsOrderByWithRelationInput | Prisma.TeacherExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeacherExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeacherExamDetails
  **/
  _count?: true | TeacherExamDetailsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeacherExamDetailsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeacherExamDetailsMaxAggregateInputType
}

export type GetTeacherExamDetailsAggregateType<T extends TeacherExamDetailsAggregateArgs> = {
      [P in keyof T & keyof AggregateTeacherExamDetails]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeacherExamDetails[P]>
    : Prisma.GetScalarType<T[P], AggregateTeacherExamDetails[P]>
}




export type TeacherExamDetailsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherExamDetailsWhereInput
  orderBy?: Prisma.TeacherExamDetailsOrderByWithAggregationInput | Prisma.TeacherExamDetailsOrderByWithAggregationInput[]
  by: Prisma.TeacherExamDetailsScalarFieldEnum[] | Prisma.TeacherExamDetailsScalarFieldEnum
  having?: Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeacherExamDetailsCountAggregateInputType | true
  _min?: TeacherExamDetailsMinAggregateInputType
  _max?: TeacherExamDetailsMaxAggregateInputType
}

export type TeacherExamDetailsGroupByOutputType = {
  id: string
  teacherId: string
  activeExams: string[]
  createdAt: Date
  _count: TeacherExamDetailsCountAggregateOutputType | null
  _min: TeacherExamDetailsMinAggregateOutputType | null
  _max: TeacherExamDetailsMaxAggregateOutputType | null
}

type GetTeacherExamDetailsGroupByPayload<T extends TeacherExamDetailsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeacherExamDetailsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeacherExamDetailsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeacherExamDetailsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeacherExamDetailsGroupByOutputType[P]>
      }
    >
  >



export type TeacherExamDetailsWhereInput = {
  AND?: Prisma.TeacherExamDetailsWhereInput | Prisma.TeacherExamDetailsWhereInput[]
  OR?: Prisma.TeacherExamDetailsWhereInput[]
  NOT?: Prisma.TeacherExamDetailsWhereInput | Prisma.TeacherExamDetailsWhereInput[]
  id?: Prisma.StringFilter<"TeacherExamDetails"> | string
  teacherId?: Prisma.StringFilter<"TeacherExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"TeacherExamDetails">
  createdAt?: Prisma.DateTimeFilter<"TeacherExamDetails"> | Date | string
}

export type TeacherExamDetailsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TeacherExamDetailsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TeacherExamDetailsWhereInput | Prisma.TeacherExamDetailsWhereInput[]
  OR?: Prisma.TeacherExamDetailsWhereInput[]
  NOT?: Prisma.TeacherExamDetailsWhereInput | Prisma.TeacherExamDetailsWhereInput[]
  teacherId?: Prisma.StringFilter<"TeacherExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"TeacherExamDetails">
  createdAt?: Prisma.DateTimeFilter<"TeacherExamDetails"> | Date | string
}, "id">

export type TeacherExamDetailsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TeacherExamDetailsCountOrderByAggregateInput
  _max?: Prisma.TeacherExamDetailsMaxOrderByAggregateInput
  _min?: Prisma.TeacherExamDetailsMinOrderByAggregateInput
}

export type TeacherExamDetailsScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput | Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput | Prisma.TeacherExamDetailsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeacherExamDetails"> | string
  teacherId?: Prisma.StringWithAggregatesFilter<"TeacherExamDetails"> | string
  activeExams?: Prisma.StringNullableListFilter<"TeacherExamDetails">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TeacherExamDetails"> | Date | string
}

export type TeacherExamDetailsCreateInput = {
  id?: string
  teacherId: string
  activeExams?: Prisma.TeacherExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type TeacherExamDetailsUncheckedCreateInput = {
  id?: string
  teacherId: string
  activeExams?: Prisma.TeacherExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type TeacherExamDetailsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.TeacherExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherExamDetailsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.TeacherExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherExamDetailsCreateManyInput = {
  id?: string
  teacherId: string
  activeExams?: Prisma.TeacherExamDetailsCreateactiveExamsInput | string[]
  createdAt?: Date | string
}

export type TeacherExamDetailsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.TeacherExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherExamDetailsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  activeExams?: Prisma.TeacherExamDetailsUpdateactiveExamsInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeacherExamDetailsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  activeExams?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TeacherExamDetailsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TeacherExamDetailsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TeacherExamDetailsCreateactiveExamsInput = {
  set: string[]
}

export type TeacherExamDetailsUpdateactiveExamsInput = {
  set?: string[]
  push?: string | string[]
}



export type TeacherExamDetailsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["teacherExamDetails"]>

export type TeacherExamDetailsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["teacherExamDetails"]>

export type TeacherExamDetailsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  teacherId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["teacherExamDetails"]>

export type TeacherExamDetailsSelectScalar = {
  id?: boolean
  teacherId?: boolean
  activeExams?: boolean
  createdAt?: boolean
}

export type TeacherExamDetailsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "teacherId" | "activeExams" | "createdAt", ExtArgs["result"]["teacherExamDetails"]>

export type $TeacherExamDetailsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeacherExamDetails"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    teacherId: string
    activeExams: string[]
    createdAt: Date
  }, ExtArgs["result"]["teacherExamDetails"]>
  composites: {}
}

export type TeacherExamDetailsGetPayload<S extends boolean | null | undefined | TeacherExamDetailsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload, S>

export type TeacherExamDetailsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeacherExamDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeacherExamDetailsCountAggregateInputType | true
  }

export interface TeacherExamDetailsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherExamDetails'], meta: { name: 'TeacherExamDetails' } }
  /**
   * Find zero or one TeacherExamDetails that matches the filter.
   * @param {TeacherExamDetailsFindUniqueArgs} args - Arguments to find a TeacherExamDetails
   * @example
   * // Get one TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeacherExamDetailsFindUniqueArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeacherExamDetails that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeacherExamDetailsFindUniqueOrThrowArgs} args - Arguments to find a TeacherExamDetails
   * @example
   * // Get one TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeacherExamDetailsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherExamDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsFindFirstArgs} args - Arguments to find a TeacherExamDetails
   * @example
   * // Get one TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeacherExamDetailsFindFirstArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeacherExamDetails that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsFindFirstOrThrowArgs} args - Arguments to find a TeacherExamDetails
   * @example
   * // Get one TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeacherExamDetailsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeacherExamDetails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findMany()
   * 
   * // Get first 10 TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teacherExamDetailsWithIdOnly = await prisma.teacherExamDetails.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeacherExamDetailsFindManyArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeacherExamDetails.
   * @param {TeacherExamDetailsCreateArgs} args - Arguments to create a TeacherExamDetails.
   * @example
   * // Create one TeacherExamDetails
   * const TeacherExamDetails = await prisma.teacherExamDetails.create({
   *   data: {
   *     // ... data to create a TeacherExamDetails
   *   }
   * })
   * 
   */
  create<T extends TeacherExamDetailsCreateArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsCreateArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeacherExamDetails.
   * @param {TeacherExamDetailsCreateManyArgs} args - Arguments to create many TeacherExamDetails.
   * @example
   * // Create many TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeacherExamDetailsCreateManyArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeacherExamDetails and returns the data saved in the database.
   * @param {TeacherExamDetailsCreateManyAndReturnArgs} args - Arguments to create many TeacherExamDetails.
   * @example
   * // Create many TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeacherExamDetails and only return the `id`
   * const teacherExamDetailsWithIdOnly = await prisma.teacherExamDetails.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeacherExamDetailsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeacherExamDetails.
   * @param {TeacherExamDetailsDeleteArgs} args - Arguments to delete one TeacherExamDetails.
   * @example
   * // Delete one TeacherExamDetails
   * const TeacherExamDetails = await prisma.teacherExamDetails.delete({
   *   where: {
   *     // ... filter to delete one TeacherExamDetails
   *   }
   * })
   * 
   */
  delete<T extends TeacherExamDetailsDeleteArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsDeleteArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeacherExamDetails.
   * @param {TeacherExamDetailsUpdateArgs} args - Arguments to update one TeacherExamDetails.
   * @example
   * // Update one TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeacherExamDetailsUpdateArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsUpdateArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeacherExamDetails.
   * @param {TeacherExamDetailsDeleteManyArgs} args - Arguments to filter TeacherExamDetails to delete.
   * @example
   * // Delete a few TeacherExamDetails
   * const { count } = await prisma.teacherExamDetails.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeacherExamDetailsDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeacherExamDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeacherExamDetailsUpdateManyArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeacherExamDetails and returns the data updated in the database.
   * @param {TeacherExamDetailsUpdateManyAndReturnArgs} args - Arguments to update many TeacherExamDetails.
   * @example
   * // Update many TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeacherExamDetails and only return the `id`
   * const teacherExamDetailsWithIdOnly = await prisma.teacherExamDetails.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeacherExamDetailsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeacherExamDetails.
   * @param {TeacherExamDetailsUpsertArgs} args - Arguments to update or create a TeacherExamDetails.
   * @example
   * // Update or create a TeacherExamDetails
   * const teacherExamDetails = await prisma.teacherExamDetails.upsert({
   *   create: {
   *     // ... data to create a TeacherExamDetails
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeacherExamDetails we want to update
   *   }
   * })
   */
  upsert<T extends TeacherExamDetailsUpsertArgs>(args: Prisma.SelectSubset<T, TeacherExamDetailsUpsertArgs<ExtArgs>>): Prisma.Prisma__TeacherExamDetailsClient<runtime.Types.Result.GetResult<Prisma.$TeacherExamDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeacherExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsCountArgs} args - Arguments to filter TeacherExamDetails to count.
   * @example
   * // Count the number of TeacherExamDetails
   * const count = await prisma.teacherExamDetails.count({
   *   where: {
   *     // ... the filter for the TeacherExamDetails we want to count
   *   }
   * })
  **/
  count<T extends TeacherExamDetailsCountArgs>(
    args?: Prisma.Subset<T, TeacherExamDetailsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeacherExamDetailsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeacherExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeacherExamDetailsAggregateArgs>(args: Prisma.Subset<T, TeacherExamDetailsAggregateArgs>): Prisma.PrismaPromise<GetTeacherExamDetailsAggregateType<T>>

  /**
   * Group by TeacherExamDetails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherExamDetailsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeacherExamDetailsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeacherExamDetailsGroupByArgs['orderBy'] }
      : { orderBy?: TeacherExamDetailsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeacherExamDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherExamDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeacherExamDetails model
 */
readonly fields: TeacherExamDetailsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeacherExamDetails.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeacherExamDetailsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeacherExamDetails model
 */
export interface TeacherExamDetailsFieldRefs {
  readonly id: Prisma.FieldRef<"TeacherExamDetails", 'String'>
  readonly teacherId: Prisma.FieldRef<"TeacherExamDetails", 'String'>
  readonly activeExams: Prisma.FieldRef<"TeacherExamDetails", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"TeacherExamDetails", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TeacherExamDetails findUnique
 */
export type TeacherExamDetailsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which TeacherExamDetails to fetch.
   */
  where: Prisma.TeacherExamDetailsWhereUniqueInput
}

/**
 * TeacherExamDetails findUniqueOrThrow
 */
export type TeacherExamDetailsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which TeacherExamDetails to fetch.
   */
  where: Prisma.TeacherExamDetailsWhereUniqueInput
}

/**
 * TeacherExamDetails findFirst
 */
export type TeacherExamDetailsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which TeacherExamDetails to fetch.
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherExamDetails to fetch.
   */
  orderBy?: Prisma.TeacherExamDetailsOrderByWithRelationInput | Prisma.TeacherExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherExamDetails.
   */
  cursor?: Prisma.TeacherExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherExamDetails.
   */
  distinct?: Prisma.TeacherExamDetailsScalarFieldEnum | Prisma.TeacherExamDetailsScalarFieldEnum[]
}

/**
 * TeacherExamDetails findFirstOrThrow
 */
export type TeacherExamDetailsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which TeacherExamDetails to fetch.
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherExamDetails to fetch.
   */
  orderBy?: Prisma.TeacherExamDetailsOrderByWithRelationInput | Prisma.TeacherExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeacherExamDetails.
   */
  cursor?: Prisma.TeacherExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherExamDetails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeacherExamDetails.
   */
  distinct?: Prisma.TeacherExamDetailsScalarFieldEnum | Prisma.TeacherExamDetailsScalarFieldEnum[]
}

/**
 * TeacherExamDetails findMany
 */
export type TeacherExamDetailsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter, which TeacherExamDetails to fetch.
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeacherExamDetails to fetch.
   */
  orderBy?: Prisma.TeacherExamDetailsOrderByWithRelationInput | Prisma.TeacherExamDetailsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeacherExamDetails.
   */
  cursor?: Prisma.TeacherExamDetailsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeacherExamDetails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeacherExamDetails.
   */
  skip?: number
  distinct?: Prisma.TeacherExamDetailsScalarFieldEnum | Prisma.TeacherExamDetailsScalarFieldEnum[]
}

/**
 * TeacherExamDetails create
 */
export type TeacherExamDetailsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * The data needed to create a TeacherExamDetails.
   */
  data: Prisma.XOR<Prisma.TeacherExamDetailsCreateInput, Prisma.TeacherExamDetailsUncheckedCreateInput>
}

/**
 * TeacherExamDetails createMany
 */
export type TeacherExamDetailsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeacherExamDetails.
   */
  data: Prisma.TeacherExamDetailsCreateManyInput | Prisma.TeacherExamDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeacherExamDetails createManyAndReturn
 */
export type TeacherExamDetailsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * The data used to create many TeacherExamDetails.
   */
  data: Prisma.TeacherExamDetailsCreateManyInput | Prisma.TeacherExamDetailsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeacherExamDetails update
 */
export type TeacherExamDetailsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * The data needed to update a TeacherExamDetails.
   */
  data: Prisma.XOR<Prisma.TeacherExamDetailsUpdateInput, Prisma.TeacherExamDetailsUncheckedUpdateInput>
  /**
   * Choose, which TeacherExamDetails to update.
   */
  where: Prisma.TeacherExamDetailsWhereUniqueInput
}

/**
 * TeacherExamDetails updateMany
 */
export type TeacherExamDetailsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeacherExamDetails.
   */
  data: Prisma.XOR<Prisma.TeacherExamDetailsUpdateManyMutationInput, Prisma.TeacherExamDetailsUncheckedUpdateManyInput>
  /**
   * Filter which TeacherExamDetails to update
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * Limit how many TeacherExamDetails to update.
   */
  limit?: number
}

/**
 * TeacherExamDetails updateManyAndReturn
 */
export type TeacherExamDetailsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * The data used to update TeacherExamDetails.
   */
  data: Prisma.XOR<Prisma.TeacherExamDetailsUpdateManyMutationInput, Prisma.TeacherExamDetailsUncheckedUpdateManyInput>
  /**
   * Filter which TeacherExamDetails to update
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * Limit how many TeacherExamDetails to update.
   */
  limit?: number
}

/**
 * TeacherExamDetails upsert
 */
export type TeacherExamDetailsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * The filter to search for the TeacherExamDetails to update in case it exists.
   */
  where: Prisma.TeacherExamDetailsWhereUniqueInput
  /**
   * In case the TeacherExamDetails found by the `where` argument doesn't exist, create a new TeacherExamDetails with this data.
   */
  create: Prisma.XOR<Prisma.TeacherExamDetailsCreateInput, Prisma.TeacherExamDetailsUncheckedCreateInput>
  /**
   * In case the TeacherExamDetails was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeacherExamDetailsUpdateInput, Prisma.TeacherExamDetailsUncheckedUpdateInput>
}

/**
 * TeacherExamDetails delete
 */
export type TeacherExamDetailsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
  /**
   * Filter which TeacherExamDetails to delete.
   */
  where: Prisma.TeacherExamDetailsWhereUniqueInput
}

/**
 * TeacherExamDetails deleteMany
 */
export type TeacherExamDetailsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeacherExamDetails to delete
   */
  where?: Prisma.TeacherExamDetailsWhereInput
  /**
   * Limit how many TeacherExamDetails to delete.
   */
  limit?: number
}

/**
 * TeacherExamDetails without action
 */
export type TeacherExamDetailsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherExamDetails
   */
  select?: Prisma.TeacherExamDetailsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeacherExamDetails
   */
  omit?: Prisma.TeacherExamDetailsOmit<ExtArgs> | null
}
