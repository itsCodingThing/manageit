
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Exam` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Exam
 * 
 */
export type ExamModel = runtime.Types.Result.DefaultSelection<Prisma.$ExamPayload>

export type AggregateExam = {
  _count: ExamCountAggregateOutputType | null
  _min: ExamMinAggregateOutputType | null
  _max: ExamMaxAggregateOutputType | null
}

export type ExamMinAggregateOutputType = {
  id: string | null
  name: string | null
  schooldId: string | null
  teacherId: string | null
  createdAt: Date | null
}

export type ExamMaxAggregateOutputType = {
  id: string | null
  name: string | null
  schooldId: string | null
  teacherId: string | null
  createdAt: Date | null
}

export type ExamCountAggregateOutputType = {
  id: number
  name: number
  schooldId: number
  teacherId: number
  createdAt: number
  _all: number
}


export type ExamMinAggregateInputType = {
  id?: true
  name?: true
  schooldId?: true
  teacherId?: true
  createdAt?: true
}

export type ExamMaxAggregateInputType = {
  id?: true
  name?: true
  schooldId?: true
  teacherId?: true
  createdAt?: true
}

export type ExamCountAggregateInputType = {
  id?: true
  name?: true
  schooldId?: true
  teacherId?: true
  createdAt?: true
  _all?: true
}

export type ExamAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exam to aggregate.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Exams
  **/
  _count?: true | ExamCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ExamMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ExamMaxAggregateInputType
}

export type GetExamAggregateType<T extends ExamAggregateArgs> = {
      [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateExam[P]>
    : Prisma.GetScalarType<T[P], AggregateExam[P]>
}




export type ExamGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithAggregationInput | Prisma.ExamOrderByWithAggregationInput[]
  by: Prisma.ExamScalarFieldEnum[] | Prisma.ExamScalarFieldEnum
  having?: Prisma.ExamScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ExamCountAggregateInputType | true
  _min?: ExamMinAggregateInputType
  _max?: ExamMaxAggregateInputType
}

export type ExamGroupByOutputType = {
  id: string
  name: string
  schooldId: string
  teacherId: string
  createdAt: Date
  _count: ExamCountAggregateOutputType | null
  _min: ExamMinAggregateOutputType | null
  _max: ExamMaxAggregateOutputType | null
}

type GetExamGroupByPayload<T extends ExamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ExamGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ExamGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ExamGroupByOutputType[P]>
      }
    >
  >



export type ExamWhereInput = {
  AND?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  OR?: Prisma.ExamWhereInput[]
  NOT?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  id?: Prisma.StringFilter<"Exam"> | string
  name?: Prisma.StringFilter<"Exam"> | string
  schooldId?: Prisma.StringFilter<"Exam"> | string
  teacherId?: Prisma.StringFilter<"Exam"> | string
  createdAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
}

export type ExamOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schooldId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ExamWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  OR?: Prisma.ExamWhereInput[]
  NOT?: Prisma.ExamWhereInput | Prisma.ExamWhereInput[]
  name?: Prisma.StringFilter<"Exam"> | string
  schooldId?: Prisma.StringFilter<"Exam"> | string
  teacherId?: Prisma.StringFilter<"Exam"> | string
  createdAt?: Prisma.DateTimeFilter<"Exam"> | Date | string
}, "id">

export type ExamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schooldId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ExamCountOrderByAggregateInput
  _max?: Prisma.ExamMaxOrderByAggregateInput
  _min?: Prisma.ExamMinOrderByAggregateInput
}

export type ExamScalarWhereWithAggregatesInput = {
  AND?: Prisma.ExamScalarWhereWithAggregatesInput | Prisma.ExamScalarWhereWithAggregatesInput[]
  OR?: Prisma.ExamScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ExamScalarWhereWithAggregatesInput | Prisma.ExamScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  name?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  schooldId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  teacherId?: Prisma.StringWithAggregatesFilter<"Exam"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Exam"> | Date | string
}

export type ExamCreateInput = {
  id?: string
  name: string
  schooldId: string
  teacherId: string
  createdAt?: Date | string
}

export type ExamUncheckedCreateInput = {
  id?: string
  name: string
  schooldId: string
  teacherId: string
  createdAt?: Date | string
}

export type ExamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  schooldId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  schooldId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamCreateManyInput = {
  id?: string
  name: string
  schooldId: string
  teacherId: string
  createdAt?: Date | string
}

export type ExamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  schooldId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  schooldId?: Prisma.StringFieldUpdateOperationsInput | string
  teacherId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ExamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schooldId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ExamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schooldId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ExamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  schooldId?: Prisma.SortOrder
  teacherId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type ExamSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schooldId?: boolean
  teacherId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["exam"]>

export type ExamSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schooldId?: boolean
  teacherId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["exam"]>

export type ExamSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  schooldId?: boolean
  teacherId?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["exam"]>

export type ExamSelectScalar = {
  id?: boolean
  name?: boolean
  schooldId?: boolean
  teacherId?: boolean
  createdAt?: boolean
}

export type ExamOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "schooldId" | "teacherId" | "createdAt", ExtArgs["result"]["exam"]>

export type $ExamPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Exam"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    schooldId: string
    teacherId: string
    createdAt: Date
  }, ExtArgs["result"]["exam"]>
  composites: {}
}

export type ExamGetPayload<S extends boolean | null | undefined | ExamDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ExamPayload, S>

export type ExamCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ExamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ExamCountAggregateInputType | true
  }

export interface ExamDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exam'], meta: { name: 'Exam' } }
  /**
   * Find zero or one Exam that matches the filter.
   * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ExamFindUniqueArgs>(args: Prisma.SelectSubset<T, ExamFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Exam that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ExamFindUniqueOrThrowArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ExamFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ExamFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exam that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindFirstArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ExamFindFirstArgs>(args?: Prisma.SelectSubset<T, ExamFindFirstArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Exam that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindFirstOrThrowArgs} args - Arguments to find a Exam
   * @example
   * // Get one Exam
   * const exam = await prisma.exam.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ExamFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ExamFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Exams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Exams
   * const exams = await prisma.exam.findMany()
   * 
   * // Get first 10 Exams
   * const exams = await prisma.exam.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ExamFindManyArgs>(args?: Prisma.SelectSubset<T, ExamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Exam.
   * @param {ExamCreateArgs} args - Arguments to create a Exam.
   * @example
   * // Create one Exam
   * const Exam = await prisma.exam.create({
   *   data: {
   *     // ... data to create a Exam
   *   }
   * })
   * 
   */
  create<T extends ExamCreateArgs>(args: Prisma.SelectSubset<T, ExamCreateArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Exams.
   * @param {ExamCreateManyArgs} args - Arguments to create many Exams.
   * @example
   * // Create many Exams
   * const exam = await prisma.exam.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ExamCreateManyArgs>(args?: Prisma.SelectSubset<T, ExamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Exams and returns the data saved in the database.
   * @param {ExamCreateManyAndReturnArgs} args - Arguments to create many Exams.
   * @example
   * // Create many Exams
   * const exam = await prisma.exam.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Exams and only return the `id`
   * const examWithIdOnly = await prisma.exam.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ExamCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ExamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Exam.
   * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
   * @example
   * // Delete one Exam
   * const Exam = await prisma.exam.delete({
   *   where: {
   *     // ... filter to delete one Exam
   *   }
   * })
   * 
   */
  delete<T extends ExamDeleteArgs>(args: Prisma.SelectSubset<T, ExamDeleteArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Exam.
   * @param {ExamUpdateArgs} args - Arguments to update one Exam.
   * @example
   * // Update one Exam
   * const exam = await prisma.exam.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ExamUpdateArgs>(args: Prisma.SelectSubset<T, ExamUpdateArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Exams.
   * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
   * @example
   * // Delete a few Exams
   * const { count } = await prisma.exam.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ExamDeleteManyArgs>(args?: Prisma.SelectSubset<T, ExamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Exams
   * const exam = await prisma.exam.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ExamUpdateManyArgs>(args: Prisma.SelectSubset<T, ExamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Exams and returns the data updated in the database.
   * @param {ExamUpdateManyAndReturnArgs} args - Arguments to update many Exams.
   * @example
   * // Update many Exams
   * const exam = await prisma.exam.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Exams and only return the `id`
   * const examWithIdOnly = await prisma.exam.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ExamUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ExamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Exam.
   * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
   * @example
   * // Update or create a Exam
   * const exam = await prisma.exam.upsert({
   *   create: {
   *     // ... data to create a Exam
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Exam we want to update
   *   }
   * })
   */
  upsert<T extends ExamUpsertArgs>(args: Prisma.SelectSubset<T, ExamUpsertArgs<ExtArgs>>): Prisma.Prisma__ExamClient<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Exams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamCountArgs} args - Arguments to filter Exams to count.
   * @example
   * // Count the number of Exams
   * const count = await prisma.exam.count({
   *   where: {
   *     // ... the filter for the Exams we want to count
   *   }
   * })
  **/
  count<T extends ExamCountArgs>(
    args?: Prisma.Subset<T, ExamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ExamCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Exam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ExamAggregateArgs>(args: Prisma.Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

  /**
   * Group by Exam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ExamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ExamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ExamGroupByArgs['orderBy'] }
      : { orderBy?: ExamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Exam model
 */
readonly fields: ExamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Exam.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ExamClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Exam model
 */
export interface ExamFieldRefs {
  readonly id: Prisma.FieldRef<"Exam", 'String'>
  readonly name: Prisma.FieldRef<"Exam", 'String'>
  readonly schooldId: Prisma.FieldRef<"Exam", 'String'>
  readonly teacherId: Prisma.FieldRef<"Exam", 'String'>
  readonly createdAt: Prisma.FieldRef<"Exam", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Exam findUnique
 */
export type ExamFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam findUniqueOrThrow
 */
export type ExamFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam findFirst
 */
export type ExamFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exams.
   */
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam findFirstOrThrow
 */
export type ExamFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter, which Exam to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Exams.
   */
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam findMany
 */
export type ExamFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter, which Exams to fetch.
   */
  where?: Prisma.ExamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Exams to fetch.
   */
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Exams.
   */
  cursor?: Prisma.ExamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Exams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Exams.
   */
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Exam create
 */
export type ExamCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data needed to create a Exam.
   */
  data: Prisma.XOR<Prisma.ExamCreateInput, Prisma.ExamUncheckedCreateInput>
}

/**
 * Exam createMany
 */
export type ExamCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Exams.
   */
  data: Prisma.ExamCreateManyInput | Prisma.ExamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exam createManyAndReturn
 */
export type ExamCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data used to create many Exams.
   */
  data: Prisma.ExamCreateManyInput | Prisma.ExamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Exam update
 */
export type ExamUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data needed to update a Exam.
   */
  data: Prisma.XOR<Prisma.ExamUpdateInput, Prisma.ExamUncheckedUpdateInput>
  /**
   * Choose, which Exam to update.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam updateMany
 */
export type ExamUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Exams.
   */
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyInput>
  /**
   * Filter which Exams to update
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to update.
   */
  limit?: number
}

/**
 * Exam updateManyAndReturn
 */
export type ExamUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The data used to update Exams.
   */
  data: Prisma.XOR<Prisma.ExamUpdateManyMutationInput, Prisma.ExamUncheckedUpdateManyInput>
  /**
   * Filter which Exams to update
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to update.
   */
  limit?: number
}

/**
 * Exam upsert
 */
export type ExamUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * The filter to search for the Exam to update in case it exists.
   */
  where: Prisma.ExamWhereUniqueInput
  /**
   * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
   */
  create: Prisma.XOR<Prisma.ExamCreateInput, Prisma.ExamUncheckedCreateInput>
  /**
   * In case the Exam was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ExamUpdateInput, Prisma.ExamUncheckedUpdateInput>
}

/**
 * Exam delete
 */
export type ExamDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Filter which Exam to delete.
   */
  where: Prisma.ExamWhereUniqueInput
}

/**
 * Exam deleteMany
 */
export type ExamDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Exams to delete
   */
  where?: Prisma.ExamWhereInput
  /**
   * Limit how many Exams to delete.
   */
  limit?: number
}

/**
 * Exam without action
 */
export type ExamDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
}
