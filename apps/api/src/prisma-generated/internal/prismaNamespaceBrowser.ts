
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/index-browser"

export type * from '../models.ts'
export type * from './prismaNamespace.ts'

export const Decimal = runtime.Decimal


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


export const ModelName = {
  Admin: 'Admin',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Batch: 'Batch',
  Exam: 'Exam',
  School: 'School',
  SchoolDetails: 'SchoolDetails',
  Student: 'Student',
  StudentExamDetails: 'StudentExamDetails',
  Teacher: 'Teacher',
  TeacherExamDetails: 'TeacherExamDetails'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  status: 'status',
  createdAt: 'createdAt'
} as const

export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phoneNumber: 'phoneNumber',
  phoneNumberVerified: 'phoneNumberVerified',
  type: 'type'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


export const BatchScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  image: 'image',
  teachers: 'teachers',
  students: 'students',
  createdAt: 'createdAt'
} as const

export type BatchScalarFieldEnum = (typeof BatchScalarFieldEnum)[keyof typeof BatchScalarFieldEnum]


export const ExamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  schooldId: 'schooldId',
  teacherId: 'teacherId',
  createdAt: 'createdAt'
} as const

export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


export const SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  address: 'address',
  type: 'type',
  code: 'code',
  image: 'image',
  status: 'status',
  createdAt: 'createdAt',
  schoolAdmins: 'schoolAdmins'
} as const

export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


export const SchoolDetailsScalarFieldEnum = {
  schoolId: 'schoolId',
  totalBatches: 'totalBatches',
  totalExams: 'totalExams',
  totalStudents: 'totalStudents',
  totalTeachers: 'totalTeachers'
} as const

export type SchoolDetailsScalarFieldEnum = (typeof SchoolDetailsScalarFieldEnum)[keyof typeof SchoolDetailsScalarFieldEnum]


export const StudentScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  dob: 'dob',
  rollNo: 'rollNo',
  email: 'email',
  phoneNumber: 'phoneNumber',
  image: 'image',
  address: 'address',
  status: 'status',
  batchs: 'batchs',
  createdAt: 'createdAt'
} as const

export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


export const StudentExamDetailsScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  activeExams: 'activeExams',
  createdAt: 'createdAt'
} as const

export type StudentExamDetailsScalarFieldEnum = (typeof StudentExamDetailsScalarFieldEnum)[keyof typeof StudentExamDetailsScalarFieldEnum]


export const TeacherScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  address: 'address',
  image: 'image',
  dob: 'dob',
  status: 'status',
  isSchoolAdmin: 'isSchoolAdmin',
  batches: 'batches',
  createdAt: 'createdAt'
} as const

export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


export const TeacherExamDetailsScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  activeExams: 'activeExams',
  createdAt: 'createdAt'
} as const

export type TeacherExamDetailsScalarFieldEnum = (typeof TeacherExamDetailsScalarFieldEnum)[keyof typeof TeacherExamDetailsScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]

